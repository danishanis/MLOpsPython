# Continuous Integration (CI) pipeline that orchestrates the training, evaluation and registration of the regression model.

resources:
  containers:  # Container jobs let you isolate your tools and dependencies inside a container
  - container: mlops  # Container Name
    image: mcr.microsoft.com/mlops/python:latest  # Container image name

pr: none
trigger:  # Specifies which branch will cause this CI build to run, i.e. the main branch (along with other files)
  branches:
    include:
    - main
  paths:
    include: # Using include clause within the main branch, one can specify for which individual files would they like to trigger the pipeline 
    - MLOpsPython
    - ml_service/pipelines/regression_build_train_pipeline.py
    - ml_service/pipelines/regression_build_train_pipeline_with_r.py
    - ml_service/pipelines/regression_build_train_pipeline_with_r_on_dbricks.py

variables:  # variables directory to specify the variables group
- template: regression-variables-template.yml
- group: devopsforai-aml-vg

pool: # Setting the VM Image one wants to use
  vmImage: ubuntu-latest

stages: # Collection of related jobs that the pipeline is divided and run into
- stage: 'Model_CI' # Stage 1 - Does all CI activites (eg. Lint Test, Unit Test, Building Azure Code, Publishing the pipeline)
  displayName: 'Model CI'
  jobs:
  - job: "Model_CI_Pipeline"
    displayName: "Model CI Pipeline"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - template: code-quality-template.yml # Step 1 of the job
    - task: AzureCLI@1  # Step 2 to run Azure CLI & run the inline script below
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: | # Step 3 - As a part of the task, the inline script is run in the azure command line using the above variable values (which file is to be run)
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          # Invoke the Python building and publishing a training pipeline
          python -m ml_service.pipelines.regression_build_train_pipeline
      displayName: 'Publish Azure Machine Learning Pipeline'

# Runs only when the previous stage 1 is a success
- stage: 'Trigger_AML_Pipeline' # Stage 2 - Calls the published pipeline from stage 1, does training and model registry into workspace, provides new version of the model from updated code in stage 1
  displayName: 'Train and evaluate model'
  condition: succeeded()
  variables:
    BUILD_URI: '$(SYSTEM.COLLECTIONURI)$(SYSTEM.TEAMPROJECT)/_build/results?buildId=$(BUILD.BUILDID)'
  jobs:
  - job: "Get_Pipeline_ID"
    condition: and(succeeded(), eq(coalesce(variables['auto-trigger-training'], 'true'), 'true'))
    displayName: "Get Pipeline ID for execution"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python -m ml_service.pipelines.run_train_pipeline --output_pipeline_id_file "pipeline_id.txt" --skip_train_execution
          # Set AMLPIPELINEID variable for next AML Pipeline task in next job
          AMLPIPELINEID="$(cat pipeline_id.txt)"
          echo "##vso[task.setvariable variable=AMLPIPELINEID;isOutput=true]$AMLPIPELINEID"
      name: 'getpipelineid'
      displayName: 'Get Pipeline ID'
  - job: "Run_ML_Pipeline"
    dependsOn: "Get_Pipeline_ID"
    displayName: "Trigger ML Training Pipeline"
    timeoutInMinutes: 0
    pool: server
    variables:
      AMLPIPELINE_ID: $[ dependencies.Get_Pipeline_ID.outputs['getpipelineid.AMLPIPELINEID'] ]
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-restApi-task.MLPublishedPipelineRestAPITask@0
      displayName: 'Invoke ML pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        PipelineId: '$(AMLPIPELINE_ID)'
        ExperimentName: '$(EXPERIMENT_NAME)'
        PipelineParameters: '"ParameterAssignments": {"model_name": "$(MODEL_NAME)"}, "tags": {"BuildId": "$(Build.BuildId)", "BuildUri": "$(BUILD_URI)"}, "StepTags": {"BuildId": "$(Build.BuildId)", "BuildUri": "$(BUILD_URI)"}'
  - job: "Training_Run_Report"
    dependsOn: "Run_ML_Pipeline"
    condition: always()
    displayName: "Publish artifact if new model was registered"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - template: regression-publish-model-artifact-template.yml
